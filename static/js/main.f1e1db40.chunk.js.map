{"version":3,"sources":["logo.svg","components/select/select.js","components/forms/2020.js","components/forms/2019.js","components/forms/forms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Select","selectYear","event","getFormState","props","console","log","target","value","name","id","onChange","this","Component","Forms2020","useState","totalSalary","state","setstate","_calculateTotal","salary","total","inc","_totalTax","calculate","taxableSalary","withCessTax","tax","calculateTotal","className","type","placeholder","e","INPUT_LIST","Forms2019","list","obj","map","data","defaultState","_calculateTax","extraAllowence","HRA","eightyC","internet","books","foodWallet","training","LTA","driverSalary","fuel","eightyD","calculateAmount","slab","range","taxAmount","calculateTax","_input","input","Forms","text","selectedYear","onStateChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1e1db40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\n\nclass Select extends Component {\n    selectYear=(event)=>{\n        let {getFormState} = this.props;\n        console.log(event.target.value)\n        getFormState(event.target.value);\n    };\n    render(){\n        return (<select name=\"yarSelect\" id=\"select\" onChange={this.selectYear}>\n             <option value='2020'>2020</option>\n           <option value='2019'>2019</option>\n        </select>);\n    }\n}\n\nexport default Select;","import React,{Component, useState} from 'react';\n\nlet calculateTotal = (salary)=>{\n    if(!salary) return{};\n    let total, tax = null;\n    if(salary<=500000){\n        total = ' â‚¹' + salary;\n        tax = 0;\n    }else{\n        let inc = 0;\n        let _totalTax = 0;\n        let calculate = (taxableSalary)=>{\n            inc += 5;\n            taxableSalary -= 250000;\n            if(taxableSalary>250000){\n                if(inc == 30){\n                    _totalTax += taxableSalary*inc/100;\n                }else{\n                    _totalTax += 250000*inc/100;\n                    calculate(taxableSalary);\n                }\n            }else{\n                _totalTax += taxableSalary*inc/100;\n            }\n        }\n        calculate(salary);\n        var withCessTax = _totalTax + (_totalTax*4/100);\n        total = salary - withCessTax;\n    }\n    return {\n        total,\n        tax:withCessTax\n    }\n};\n\nexport const Forms2020 = ()=> {\n    const [state, setstate] = useState({totalSalary:''});\n    let _calculateTotal = calculateTotal(state.totalSalary);\n\n        return  (\n            <div className=\"form-wrapper\">\n                <form>\n                    <input type='number' value={state.totalSalary}  placeholder='Total Salary' onChange={(e)=>setstate({...state,totalSalary:e.target.value})}></input>\n                </form>\n                <div className=\"summary\">\n                    <h1>Summary</h1>\n                    Salary: {state.totalSalary}<br/>\n                    Total after Tax: {_calculateTotal.total} <br/>\n                    Tax: {_calculateTotal.tax}\n                </div>\n            </div>\n        )\n}","import React,{useState} from 'react';\n\nconst INPUT_LIST = [\n    'totalSalary',\n    'extraAllowence',\n    'HRA',\n    'eightyC',\n    'internet',\n    'books',\n    'foodWallet',\n    'training',\n    'LTA',\n    'driverSalary',\n    'fuel',\n    'eightyD'\n];\n\n/**\n * Calculating the tax\n * @param {*} state \n */\nconst calculateTax = (state) =>{\n    let {totalSalary,extraAllowence, HRA, eightyC, internet,books, foodWallet, training,LTA,driverSalary,fuel,eightyD} = state;\n    let range1 = 500000, range2 = 1000000;\n\n    if(totalSalary<=range1){\n        return{\n            totalSalary,\n            tax:0\n        }\n    }\n\n    let total = (totalSalary+extraAllowence)-(HRA+eightyC+internet+books+foodWallet+training+LTA+driverSalary+fuel+eightyD);\n\n    let calculate = (total)=>{\n        let tax = 0;\n\n        let calculateAmount = (slab,range)=>{\n            let taxAmount = total-range;\n            tax += (taxAmount)*slab/100;\n            total = total-taxAmount;\n        };\n\n        //In case of salary is greater the 1000000\n        if(total>range2){\n           calculateAmount(30, range2)\n        }\n\n         //In case of salary is greater the 500000\n        if(total>range1){\n            calculateAmount(20, range1)\n        }\n\n        //In case of salary is less the 500000\n        if(total<=range1){\n            total = total - 250000;\n            tax += (total)*5/100;\n        }\n\n        return tax;\n    }\n    calculate(total);\n    \n    return{\n        totalSalary:totalSalary-calculate(total),\n        tax:calculate(total)\n    }\n};\n\n\n/**\n * Generating the input element\n * @param {*} list \n */\nlet input = (state, setstate, list)=>{\n    return list && list.map(data=>{\n        return(\n            <input type='number' value={state[data]}  placeholder={`${data}`} onChange={(e)=>setstate({...state,[data]:e.target.value*1})}></input>\n        );\n    })\n};\n\n\n/**\n * Generating the objects for default state\n * @param {*} list \n */\n\nlet defaultState = (list)=>{\n    let obj = {};\n     list.map(data=>{\n        obj = {\n            ...obj,\n            [data]:''\n        }\n    });\n    return obj;\n};\n\nexport const Forms2019 = () => {\n    const [state, setstate] = useState({...defaultState(INPUT_LIST)});\n    let _calculateTax = calculateTax(state);\n    let _input = input(state, setstate, INPUT_LIST);\n\n    return  (\n            <div className=\"form-wrapper\">\n                <form>\n                    {_input}\n                </form>\n                <div className=\"summary\">\n                    <h1>Summary</h1>\n                    Salary: {(state.totalSalary*1)+(state.extraAllowence*1)}<br/>\n                    Total after Tax: {_calculateTax.totalSalary} <br/>\n                    Tax: {_calculateTax.tax}\n                </div>\n            </div>\n    )\n};\n","import React,{Component, Fragment, useState, useEffect} from 'react';\nimport Select from '../select/select';\n\nimport {Forms2020} from './2020';\nimport {Forms2019} from './2019';\n \nexport const Forms = (props)=>{\n    let {text} = props;\n    const [selectedYear, onStateChange] = useState(2020);\n    const getFormState = (value)=>{\n        onStateChange(value);\n    };\n\n    return  (\n        <Fragment>\n            <span className=\"title\">{text}</span> <Select getFormState={getFormState}></Select>\n           { selectedYear == '2020' ? \n            <Forms2020></Forms2020> :\n            <Forms2019></Forms2019>}\n        </Fragment>\n    );\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {Forms} from './components/forms/forms';\nimport {UseStatePractice} from './components/useState/useState01'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <UseStatePractice /> */}\n      <header className=\"App-header\">\n        <Forms text='Tax Calculation'></Forms>\n      </header>\n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}